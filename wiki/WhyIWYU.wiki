#summary Why Bother with Include-What-You-Use?
#labels Featured,Phase-Design

= Introduction =

"Include what you use" means for every symbol (type, function, variable, or macro) that you use in a source file, the file should #include a .h file that exports the declaration of that symbol, or (if possible) forward-declare the symbol.  Why is this a good idea?

== Faster Compiles ==

Every .h file you bring in when compiling a source file lengthens the time to compile, as the bytes have to be read, preprocessed, and parsed.  If you're not actually using a .h file, you remove that cost.  With template code, where entire instantiations have to be in .h files, this can be hundreds of thousands of bytes of code.  In one case at Google, running include-what-you-use over a .cc file improved its compile time by 30%.

Here, the main benefit of include-what-you-use comes from the flip side: "don't include what you don't use."

== Fewer Recompiles ==

Many build tools, such as `make`, provide a mechanism for automatically figuring out what .h files a .cc file depends on.  These mechanisms typically look at #include lines.  When unnecessary #includes are listed, the build system is more likely to recompile in cases where it's not necessary.

Again, the main advantage here is from "don't include what you don't use."

== Allow Refactoring ==

Suppose you refactor `foo.h` so it no longer uses vectors.  You'd like to remove `#include <vector>` from `foo.h`, to reduce compile time -- template class files such as `vector` can include a lot of code.  But can you?  In theory yes, but in practice maybe not: some other file may be #including you and using vectors, and depending (probably unknowingly) on your `#include <vector>` to compile.  Your refactor could break code far away from you.

This is most compelling for a very large codebase (such as Google's).  In a small codebase, it's practical to just compile everything after a refactor like this, and clean up any errors you see.  When your codebase has hundreds of thousands of source files in it, identifying and cleaning up the errors can be a project in itself.  In practice, people are likely to just leave the `#include <vector>` line in there, even though it's unnecessary.

Here, it's the actual 'include what you use' policy that saves the day.  If everyone who uses vector is #including `<vector>` themselves, then you can remove `<vector>` without fear of breaking anything.



= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages