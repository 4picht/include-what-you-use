#summary IWYU pragmas described

=IWYU pragmas=

IWYU pragmas are used to give IWYU information that isn't obvious from the source code, such as how different files relate to each other and which #includes to never remove or include.

All pragmas start with `"// IWYU pragma: "` or `"/* IWYU pragma: "`. They are case-sensitive and spaces are significant.

==IWYU pragma: keep==
This pragma applies to a single `#include` statement. It forces IWYU to keep an inclusion even if it is deemed unnecessary.

{{{
main.cc:
 #include <vector> // IWYU pragma: keep
}}}

In this case, `std::vector` isn't used, so `<vector>` would normally be discarded, but the pragma instructs IWYU to leave it.


==IWYU pragma: export==
This pragma applies to a single `#include` statement. It says that the current file is to be considered the provider of any symbol from the included file.

{{{
facade.h:
 #include "detail/constants.h" // IWYU pragma: export
 #include "detail/types.h" // IWYU pragma: export
 #include <vector> // don't export stuff from <vector>

main.cc:
 #include "facade.h"

 // Assuming Thing comes from detail/types.h and MAX_THINGS from detail/constants.h
 std::vector<Thing> things(MAX_THINGS);
}}}

Here, since `detail/constants.h` and `detail/types.h` have both been exported, IWYU is happy with the `facade.h` include for `Thing` and `MAX_THINGS`.

In contrast, since `<vector>` has not been exported from `facade.h`, it will be suggested as an additional include.


==IWYU pragma: begin_exports/end_exports==
This pragma applies to a set of `#include` statements. It declares that the including file is to be considered the provider of any symbol from these included files.
This is the same as decorating every `#include` statement with `IWYU pragma: export`.

{{{
facade.h:
 // IWYU pragma: begin_exports
 #include "detail/constants.h"
 #include "detail/types.h"
 // IWYU pragma: end_exports 

 #include <vector> // don't export stuff from <vector>
}}}

==IWYU pragma: private==
This pragma applies to the current header file. It says that any symbol from this file will be provided by another, optionally named, file.

{{{
internal.h:
 // IWYU pragma: private
 struct Internal {};

private.h:
 // IWYU pragma: private, include "public.h"
 struct Private {};

public.h:
 #include "private.h"
 #include "internal.h"

main.cc:
 #include "private.h"
 #include "internal.h"

 Private p;
 Internal i;
}}}

Using the type `Private` in `main.cc` will cause IWYU to suggest that you include `public.h`.
Using the type `Internal` in `main.cc`  will cause IWYU to suggest that you include `internal.h`, but will also result in a warning that there's no public header for `internal.h`.


==IWYU pragma: no_include==
This pragma applies to the current source file. It declares that the named file should not be suggested for inclusion by IWYU.

{{{
internal.h:
 struct Internal {};

main.cc:
 #include "unrelated.h" // includes internal.h
 // IWYU pragma: no_include "internal.h"

 Internal i;
}}}

IWYU will fail to compile `main.cc` because symbol `Internal` requires including `internal.h`, but it will not suggest adding an `#include` of it. Note also that if you had included `internal.h` in `main.cc`, IWYU would suggest that the `#include` be removed.

This is useful when you know a symbol definition is already available via some unrelated header, and you want to preserve that implicit dependency.


==IWYU pragma: no_forward_declare==
This pragma applies to the current source file. It says that the named symbol should not be suggested for forward-declaration by IWYU.

{{{
public.h:
 struct Public {};

main.cc:
 #include "unrelated.h" // declares Public
 // IWYU pragma: no_forward_declare Public
 struct Public;
 Public* i;
}}}

IWYU will suggest removing the forward declaration of `Public`, or would avoid suggesting adding it if it wasn't already there.

This is useful when you know a symbol declaration is already available in a source file via some unrelated header and you want to preserve that implicit dependency, or when IWYU does not correctly understand that the definition is necessary.


==IWYU pragma: friend==
This pragma applies to the current header file. It says that any file matching the given regular expression will be considered a friend, and is allowed to include this header even if it's private. Conceptually similar to `friend` in C++.

If the expression contains spaces, it must be enclosed in quotes.

{{{
detail/private.h:
 // IWYU pragma: private
 // IWYU pragma: friend "detail/.*"
 struct Private {};

detail/other.h:
 #include "detail/private.h"

 // IWYU pragma: private
 // IWYU pragma: friend "main\.cc"
 struct AlsoPrivate : Private {};

main.cc:
 #include "detail/other.h"

 AlsoPrivate p;
}}}